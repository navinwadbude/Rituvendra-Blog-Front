{"ast":null,"code":"var colour = require('./colour');\n\nvar bus = require('./bus');\n\nvar required = false;\nvar useColours = true;\nvar coding = {\n  log: 'black',\n  info: 'yellow',\n  status: 'green',\n  detail: 'yellow',\n  fail: 'red',\n  error: 'red'\n};\n\nfunction log(type, text) {\n  var msg = '[nodemon] ' + (text || '');\n\n  if (useColours) {\n    msg = colour(coding[type], msg);\n  } // always push the message through our bus, using nextTick\n  // to help testing and get _out of_ promises.\n\n\n  process.nextTick(() => {\n    bus.emit('log', {\n      type: type,\n      message: text,\n      colour: msg\n    });\n  }); // but if we're running on the command line, also echo out\n  // question: should we actually just consume our own events?\n\n  if (!required) {\n    if (type === 'error') {\n      console.error(msg);\n    } else {\n      console.log(msg || '');\n    }\n  }\n}\n\nvar Logger = function (r) {\n  if (!(this instanceof Logger)) {\n    return new Logger(r);\n  }\n\n  this.required(r);\n  return this;\n};\n\nObject.keys(coding).forEach(function (type) {\n  Logger.prototype[type] = log.bind(null, type);\n}); // detail is for messages that are turned on during debug\n\nLogger.prototype.detail = function (msg) {\n  if (this.debug) {\n    log('detail', msg);\n  }\n};\n\nLogger.prototype.required = function (val) {\n  required = val;\n};\n\nLogger.prototype.debug = false;\n\nLogger.prototype._log = function (type, msg) {\n  if (required) {\n    bus.emit('log', {\n      type: type,\n      message: msg || '',\n      colour: msg || ''\n    });\n  } else if (type === 'error') {\n    console.error(msg);\n  } else {\n    console.log(msg || '');\n  }\n};\n\nObject.defineProperty(Logger.prototype, 'useColours', {\n  set: function (val) {\n    useColours = val;\n  },\n  get: function () {\n    return useColours;\n  }\n});\nmodule.exports = Logger;","map":{"version":3,"names":["colour","require","bus","required","useColours","coding","log","info","status","detail","fail","error","type","text","msg","process","nextTick","emit","message","console","Logger","r","Object","keys","forEach","prototype","bind","debug","val","_log","defineProperty","set","get","module","exports"],"sources":["/home/dell/node_modules/nodemon/lib/utils/log.js"],"sourcesContent":["var colour = require('./colour');\nvar bus = require('./bus');\nvar required = false;\nvar useColours = true;\n\nvar coding = {\n  log: 'black',\n  info: 'yellow',\n  status: 'green',\n  detail: 'yellow',\n  fail: 'red',\n  error: 'red',\n};\n\nfunction log(type, text) {\n  var msg = '[nodemon] ' + (text || '');\n\n  if (useColours) {\n    msg = colour(coding[type], msg);\n  }\n\n  // always push the message through our bus, using nextTick\n  // to help testing and get _out of_ promises.\n  process.nextTick(() => {\n    bus.emit('log', { type: type, message: text, colour: msg });\n  });\n\n  // but if we're running on the command line, also echo out\n  // question: should we actually just consume our own events?\n  if (!required) {\n    if (type === 'error') {\n      console.error(msg);\n    } else {\n      console.log(msg || '');\n    }\n  }\n}\n\nvar Logger = function (r) {\n  if (!(this instanceof Logger)) {\n    return new Logger(r);\n  }\n  this.required(r);\n  return this;\n};\n\nObject.keys(coding).forEach(function (type) {\n  Logger.prototype[type] = log.bind(null, type);\n});\n\n// detail is for messages that are turned on during debug\nLogger.prototype.detail = function (msg) {\n  if (this.debug) {\n    log('detail', msg);\n  }\n};\n\nLogger.prototype.required = function (val) {\n  required = val;\n};\n\nLogger.prototype.debug = false;\nLogger.prototype._log = function (type, msg) {\n  if (required) {\n    bus.emit('log', { type: type, message: msg || '', colour: msg || '' });\n  } else if (type === 'error') {\n    console.error(msg);\n  } else {\n    console.log(msg || '');\n  }\n};\n\nObject.defineProperty(Logger.prototype, 'useColours', {\n  set: function (val) {\n    useColours = val;\n  },\n  get: function () {\n    return useColours;\n  },\n});\n\nmodule.exports = Logger;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}