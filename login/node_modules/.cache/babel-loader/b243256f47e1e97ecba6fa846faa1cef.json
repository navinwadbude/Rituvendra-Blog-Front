{"ast":null,"code":"var clone = require('./clone');\n\nmodule.exports = merge;\n\nfunction typesMatch(a, b) {\n  return typeof a === typeof b && Array.isArray(a) === Array.isArray(b);\n}\n/**\n * A deep merge of the source based on the target.\n * @param  {Object} source   [description]\n * @param  {Object} target   [description]\n * @return {Object}          [description]\n */\n\n\nfunction merge(source, target, result) {\n  if (result === undefined) {\n    result = clone(source);\n  } // merge missing values from the target to the source\n\n\n  Object.getOwnPropertyNames(target).forEach(function (key) {\n    if (source[key] === undefined) {\n      result[key] = target[key];\n    }\n  });\n  Object.getOwnPropertyNames(source).forEach(function (key) {\n    var value = source[key];\n\n    if (target[key] && typesMatch(value, target[key])) {\n      // merge empty values\n      if (value === '') {\n        result[key] = target[key];\n      }\n\n      if (Array.isArray(value)) {\n        if (value.length === 0 && target[key].length) {\n          result[key] = target[key].slice(0);\n        }\n      } else if (typeof value === 'object') {\n        result[key] = merge(value, target[key]);\n      }\n    }\n  });\n  return result;\n}","map":{"version":3,"names":["clone","require","module","exports","merge","typesMatch","a","b","Array","isArray","source","target","result","undefined","Object","getOwnPropertyNames","forEach","key","value","length","slice"],"sources":["/home/dell/node_modules/nodemon/lib/utils/merge.js"],"sourcesContent":["var clone = require('./clone');\n\nmodule.exports = merge;\n\nfunction typesMatch(a, b) {\n  return (typeof a === typeof b) && (Array.isArray(a) === Array.isArray(b));\n}\n\n/**\n * A deep merge of the source based on the target.\n * @param  {Object} source   [description]\n * @param  {Object} target   [description]\n * @return {Object}          [description]\n */\nfunction merge(source, target, result) {\n  if (result === undefined) {\n    result = clone(source);\n  }\n\n  // merge missing values from the target to the source\n  Object.getOwnPropertyNames(target).forEach(function (key) {\n    if (source[key] === undefined) {\n      result[key] = target[key];\n    }\n  });\n\n  Object.getOwnPropertyNames(source).forEach(function (key) {\n    var value = source[key];\n\n    if (target[key] && typesMatch(value, target[key])) {\n      // merge empty values\n      if (value === '') {\n        result[key] = target[key];\n      }\n\n      if (Array.isArray(value)) {\n        if (value.length === 0 && target[key].length) {\n          result[key] = target[key].slice(0);\n        }\n      } else if (typeof value === 'object') {\n        result[key] = merge(value, target[key]);\n      }\n    }\n  });\n\n  return result;\n}"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,KAAjB;;AAEA,SAASC,UAAT,CAAoBC,CAApB,EAAuBC,CAAvB,EAA0B;EACxB,OAAQ,OAAOD,CAAP,KAAa,OAAOC,CAArB,IAA4BC,KAAK,CAACC,OAAN,CAAcH,CAAd,MAAqBE,KAAK,CAACC,OAAN,CAAcF,CAAd,CAAxD;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASH,KAAT,CAAeM,MAAf,EAAuBC,MAAvB,EAA+BC,MAA/B,EAAuC;EACrC,IAAIA,MAAM,KAAKC,SAAf,EAA0B;IACxBD,MAAM,GAAGZ,KAAK,CAACU,MAAD,CAAd;EACD,CAHoC,CAKrC;;;EACAI,MAAM,CAACC,mBAAP,CAA2BJ,MAA3B,EAAmCK,OAAnC,CAA2C,UAAUC,GAAV,EAAe;IACxD,IAAIP,MAAM,CAACO,GAAD,CAAN,KAAgBJ,SAApB,EAA+B;MAC7BD,MAAM,CAACK,GAAD,CAAN,GAAcN,MAAM,CAACM,GAAD,CAApB;IACD;EACF,CAJD;EAMAH,MAAM,CAACC,mBAAP,CAA2BL,MAA3B,EAAmCM,OAAnC,CAA2C,UAAUC,GAAV,EAAe;IACxD,IAAIC,KAAK,GAAGR,MAAM,CAACO,GAAD,CAAlB;;IAEA,IAAIN,MAAM,CAACM,GAAD,CAAN,IAAeZ,UAAU,CAACa,KAAD,EAAQP,MAAM,CAACM,GAAD,CAAd,CAA7B,EAAmD;MACjD;MACA,IAAIC,KAAK,KAAK,EAAd,EAAkB;QAChBN,MAAM,CAACK,GAAD,CAAN,GAAcN,MAAM,CAACM,GAAD,CAApB;MACD;;MAED,IAAIT,KAAK,CAACC,OAAN,CAAcS,KAAd,CAAJ,EAA0B;QACxB,IAAIA,KAAK,CAACC,MAAN,KAAiB,CAAjB,IAAsBR,MAAM,CAACM,GAAD,CAAN,CAAYE,MAAtC,EAA8C;UAC5CP,MAAM,CAACK,GAAD,CAAN,GAAcN,MAAM,CAACM,GAAD,CAAN,CAAYG,KAAZ,CAAkB,CAAlB,CAAd;QACD;MACF,CAJD,MAIO,IAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;QACpCN,MAAM,CAACK,GAAD,CAAN,GAAcb,KAAK,CAACc,KAAD,EAAQP,MAAM,CAACM,GAAD,CAAd,CAAnB;MACD;IACF;EACF,CAjBD;EAmBA,OAAOL,MAAP;AACD"},"metadata":{},"sourceType":"script"}